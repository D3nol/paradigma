Python 3.7.4 (tags/v3.7.4:e09359112e, Jul  8 2019, 20:34:20) [MSC v.1916 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> # Measure some strings:
>>> words={'cat','window','defenestsrate']
SyntaxError: invalid syntax
>>> words = [ 'cat' , 'window' , 'defenestrate' ]
>>> for w in words :
	print ( w , len ( w ))

	
cat 3
window 6
defenestrate 12
>>> for w in words [:]:  # Loop over a slice copy of the entire list.
    if len ( w ) > 6 :
        words . insert ( 0 , w )

        
>>> word
Traceback (most recent call last):
  File "<pyshell#8>", line 1, in <module>
    word
NameError: name 'word' is not defined
>>> for w in words [:]:  # Loop over a slice copy of the entire list.
    if len ( w ) > 6 :
        words . insert ( 0 , w )

        
>>> words
['defenestrate', 'defenestrate', 'defenestrate', 'cat', 'window', 'defenestrate']
>>>  for i in range ( 5 ):
    print ( i )
    
SyntaxError: unexpected indent
>>> for i in range ( 5 ):
	    print ( i )

	    
0
1
2
3
4
>>> range ( 5 , 10 )
range(5, 10)
>>> for i in range(5,10)
SyntaxError: invalid syntax
>>> for i in range(5,10):
	print(i)

	
5
6
7
8
9
>>> for i in range(0,10,3):
	print(i)

	
0
3
6
9
>>> for i in range(-10,-100,-30):
	print(i)

	
-10
-40
-70
>>> a = [ 'Mary' , 'had' , 'a' , 'little' , 'lamb' ]
 for i in range ( len ( a )):
    print ( i , a [ i ])
    
SyntaxError: multiple statements found while compiling a single statement
>>> a = [ 'Mary' , 'had' , 'a' , 'little' , 'lamb' ]
	 for i in range ( len ( a )):
	    print ( i , a [ i ])
	    
SyntaxError: multiple statements found while compiling a single statement
>>> a = [ 'Mary' , 'had' , 'a' , 'little' , 'lamb' ]
>>> for i in range ( len ( a )):
	print(i,a[i])

	
0 Mary
1 had
2 a
3 little
4 lamb
>>> print ( range ( 10 ))
range(0, 10)
>>> list ( range ( 5 ))
[0, 1, 2, 3, 4]
>>> for n in range ( 2 , 10 ):
    for x in range ( 2 , n ):
        if n % x == 0 :
            print ( n , 'equals' , x , '*' , n // x )
            break
    else :
        # loop fell through without finding a factor
        print ( n , 'is a prime number' )

        
2 is a prime number
3 is a prime number
4 equals 2 * 2
5 is a prime number
6 equals 2 * 3
7 is a prime number
8 equals 2 * 4
9 equals 3 * 3
>>>   for num in range ( 2 , 10 ):
    if num % 2 == 0 :
        print ( "Found an even number" , num )
        continue
    print ( "Found a number" , num )
    
SyntaxError: unexpected indent
>>> for num in range ( 2 , 10 ):
	if num % 2 == 0 :
		print ( "Found an even number" , num )
		continue
		    print ( "Found a number" , num )
		    
SyntaxError: unexpected indent
>>> for num in range ( 2 , 10 ):
      if num % 2 == 0 :
        print ( "Found an even number" , num )
        continue
    print ( "Found a number" , num )
    
SyntaxError: unindent does not match any outer indentation level
>>> for num in range ( 2 , 10 ):
	    if num % 2 == 0 :
		print ( "Found an even number" , num )
		continue
    print ( "Found a number" , num )
    
SyntaxError: inconsistent use of tabs and spaces in indentation
>>> for num in range ( 2 , 10 ):
      if num % 2 == 0 :
        print ( "Found an even number" , num )
        continue
    print ( "Found a number" , num )
    
SyntaxError: unindent does not match any outer indentation level
>>> for num in range ( 2 , 10 ):
      if num % 2 == 0 :
        print ( "Found an even number" , num )
        continue
      print ( "Found a number" , num )

      
Found an even number 2
Found a number 3
Found an even number 4
Found a number 5
Found an even number 6
Found a number 7
Found an even number 8
Found a number 9
>>> while True:
	pass

Traceback (most recent call last):
  File "<pyshell#43>", line 2, in <module>
    pass
KeyboardInterrupt
>>> class MyEmptyClass:
	pass
KeyboardInterrupt
>>> de inilog(*args):
	
SyntaxError: invalid syntax
>>> def initlog(*args):
	pass
KeyboardInterrupt
>>> def fib ( n ):    # write Fibonacci series up to n
	    """Print a Fibonacci series up to n."""
	    a , b = 0 , 1
	    while a < n :
		print ( a , end = ' ' )
		a , b = b , a + b
	    print ()
	    
SyntaxError: inconsistent use of tabs and spaces in indentation
>>> def fib ( n ):    # write Fibonacci series up to n
	"""Print a Fibonacci series up to n."""
	a , b = 0 , 1
	while a < n :
	    print ( a , end = ' ' )
	    a , b = b , a + b
	print ()

	
>>> #Now call the function we just defined:
>>> fib(2000)
0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 
>>> fib
<function fib at 0x0000000003171318>
>>> f=fib
>>> f(100)
0 1 1 2 3 5 8 13 21 34 55 89 
>>> fib(0)

>>> print(fib(0))

None
>>> def fib2 ( n ):  # return Fibonacci series up to n
      """Return a list containing the Fibonacci series up to n."""
      result = []
      a , b = 0 , 1
      while a < n :
          result . append ( a )    # see below
          a , b = b , a + b
      return result

>>> f100=fib2(100)
>>> f100
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
>>> def ask_ok ( prompt , retries = 4 , reminder = 'Please try again!' ):
      while True :
        ok = input ( prompt )
        if ok in ( 'y' , 'ye' , 'yes' ):
            return True
        if ok in ( 'n' , 'no' , 'nop' , 'nope' ):
            return False
        retries = retries - 1
        if retries < 0 :
            raise ValueError ( 'invalid user response' )
        print ( reminder )

        
>>> i=5
>>> def f(arg=i):
	print(arg)

	
>>> i=6
>>> f()
5
>>> def f(a,L=[]):
	L.appendt(a)
	return L
print(f(1))
SyntaxError: invalid syntax
>>> print (f(1))
1
None
>>> print (f(2))
2
None
>>> print (f(3))
3
None
>>> def f ( a , L = None ):
	if L is None :
           L = []
	L . append ( a )
        return L
SyntaxError: inconsistent use of tabs and spaces in indentation
>>> def f ( a , L = None ):
       if L is None :
           L = []
       L . append ( a )
       return L

>>> def parrot ( voltage , state = 'a stiff' , action = 'voom' , type = 'Norwegian Blue' ):
	    print ( "-- This parrot wouldn't" , action , end = ' ' )
	    print ( "if you put" , voltage , "volts through it." )
	    print ( "-- Lovely plumage, the" , type )
	    print ( "-- It's" , state , "!" )

>>> parrot ( 1000 )                                          # 1 positional argument
parrot ( voltage = 1000 )                                  # 1 keyword argument
parrot ( voltage = 1000000 , action = 'VOOOOOM' )             # 2 keyword arguments
parrot ( action = 'VOOOOOM' , voltage = 1000000 )             # 2 keyword arguments
parrot ( 'a million' , 'bereft of life' , 'jump' )         # 3 positional arguments
parrot ( 'a thousand' , state = 'pushing up the daisies' )  # 1 positional, 1 keyword
SyntaxError: multiple statements found while compiling a single statement
>>> def function(a):
	pass

>>> function (0,a=0)
Traceback (most recent call last):
  File "<pyshell#87>", line 1, in <module>
    function (0,a=0)
TypeError: function() got multiple values for argument 'a'
>>> def cheeseshop ( kind , * arguments , ** keywords ):
	    print ( "-- Do you have any" , kind , "?" )
	    print ( "-- I'm sorry, we're all out of" , kind )
	    for arg in arguments :
		print ( arg )
	    print ( "-" * 40 )
	    for kw in keywords :
		print ( kw , ":" , keywords [ kw ])
		
SyntaxError: inconsistent use of tabs and spaces in indentation
>>> def make_incrementor ( n ):
	    return lambda x : x + n

	
>>> f=make_incrementor(42)
>>> f(0)
42
>>> f(1)
43
>>> pairs = [( 1 , 'one' ), ( 2 , 'two' ), ( 3 , 'three' ), ( 4 , 'four' )]
>>> pairs . sort ( key = lambda pair : pair [ 1 ])
>>> pairs
[(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]
>>> def my_function ():
    """Do nothing, but document it.
 
     No, really, it doesn't do anything.
     """
    pass

>>> print (my_function.__doc__)
Do nothing, but document it.
 
     No, really, it doesn't do anything.
     
>>> def f ( ham : str , eggs : str = 'eggs' ) -> str :
	    print ( "Annotations:" , f . __annotations__ )
	    print ( "Arguments:" , ham , eggs )
	    return ham + ' and ' + eggs

	
>>> f('spam')
Annotations: {'ham': <class 'str'>, 'eggs': <class 'str'>, 'return': <class 'str'>}
Arguments: spam eggs
'spam and eggs'
>>> 